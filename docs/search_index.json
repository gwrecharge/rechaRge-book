[["index.html", "rechaRge: the HydroBudget model Welcome", " rechaRge: the HydroBudget model Emmanuel Dubois, Yannick Marcon 2024-04-03 Welcome This book provides users with some common workflows for performing groundwater recharge modeling. This book will teach you how to use the rechaRge R package (Dubois and Marcon 2024). This material serves as an online companion for the manuscript “Simulation of long-term spatiotemporal variations in regional-scale groundwater recharge: contributions of a water budget approach in cold and humid climates” (Dubois et al. 2021). HydroBudget (HB) is a spatially distributed groundwater recharge (GWR) model that computes a superficial water budget on grid cells of regional-scale watersheds with outputs aggregated into monthly time steps and with limited computational time. The model is open-source and was coded in R. This rechaRge R package is the result of the effort to make this code reusable and extensible. This book is organized into three parts. In the Introduction, we provide practical information about the rechaRge R package. The Simulation part focuses on the HydroBudget model that comes with the R package, and how to use the rechaRgefunctions to run simulations, then save and visualize the results. The Calibration and Sensitivity part explores the usage of the sensitivity and of the caRamel R packages to find and evaluate the “best” sets of model parameters. Finally, the Extensibility section highlights how the generic functions of the rechaRge R package can be applied to a different groundwater recharge model. References "],["intro.html", "Chapter 1 Introduction 1.1 Installation 1.2 Usage", " Chapter 1 Introduction 1.1 Installation The package will be submitted to the CRAN repository. In the meantime, the package installation options are: Using remotes remotes::install_github(&quot;gwrecharge/rechaRge&quot;, ref = &quot;main&quot;) Using pak pak::pkg_install(&quot;gwrecharge/rechaRge@main&quot;) 1.2 Usage Some ready to use data files are made available for documentation and testing purposes. This book is based on these examples, see the section 2. "],["simulation.html", "Chapter 2 Simulation 2.1 HydroBudget Model 2.2 Input data and parameters 2.3 Simulation 2.4 Results", " Chapter 2 Simulation 2.1 HydroBudget Model HydroBudget was developed as an accessible and computationally affordable model to simulate GWR over large areas (thousands of km2) and for long time periods (decades), in cold and humid climates. The model uses commonly available meteorological data (daily precipitation and temperature, spatialized if possible) and spatially distributed data (pedology, land cover, and slopes). It is calibrated with river flows and baseflows estimated with recursive filters. The model needs reasonable computational capacity to reach relatively short computational times. It is based on simplified representations of hydrological processes and is driven by eight parameters that need to be calibrated. HydroBudget uses a degree-day snow model for snow accumulation and snowmelt, and a conceptual lumped reservoir to compute the soil water budget on a daily time step. For each grid cell and each time step, the calculation distributes precipitation as runoff (R), evapotranspiration (ET), and infiltration that can reach the saturated zone if geological conditions below the soil allow deep percolation. HB thus produces estimates of potential GWR. The daily results are compiled at a monthly time step. 2.2 Input data and parameters Start with loading the rechaRge library. library(rechaRge) Then load the input data for the simulation. In that case, the example datasets are available for download. The data input handler is based on data.table::fread function, then you can provide an URL like in the example or a local file path. base_url &lt;- &quot;https://github.com/gwrecharge/rechaRge-book/raw/main/examples/input/&quot; input_rcn &lt;- paste0(base_url, &quot;rcn.csv.gz&quot;) # RCN values per RCN cell ID input_climate &lt;- paste0(base_url, &quot;climate.csv.gz&quot;) # precipitation total in mm/d per climate cell ID input_rcn_climate &lt;- paste0(base_url, &quot;rcn_climate.csv.gz&quot;) # relation between climate and RCN cell IDs Set the HydroBudget model with the parameters values (if you do not know which parameters to set, see the Calibration section): HB &lt;- rechaRge::new_hydrobudget( T_m = 2.1, # melting temperature (°C) C_m = 6.2, # melting coefficient (mm/°C/d) TT_F = -17.6, # Threshold temperature for soil frost (°C) F_T = 16.4, # Freezing time (d) t_API = 3.9, # Antecedent precipitation index time (d) f_runoff = 0.63, # Runoff factor (-) sw_m = 431, # Maximum soil water content (mm) f_inf = 0.07 # infiltration factor (-) ) As the HydroBudget model expects some data structure (expected data, with predefined column names), set the column names mappings matching the input datasets: HB$rcn_columns &lt;- list( rcn_id = &quot;cell_ID&quot;, RCNII = &quot;RCNII&quot;, lon = &quot;X_L93&quot;, lat = &quot;Y_L93&quot; ) HB$climate_columns$climate_id &lt;- &quot;climate_cell&quot; HB$rcn_climate_columns &lt;- list( climate_id = &quot;climate_cell&quot;, rcn_id = &quot;cell_ID&quot; ) Then define the simulation period (if not, the period will be discovered from the input data): simul_period &lt;- c(2010, 2017) 2.3 Simulation Once the HydroBudget object is ready, compute the water budget using the model implementation: water_budget &lt;- rechaRge::compute_recharge( HB, rcn = input_rcn, climate = input_climate, rcn_climate = input_rcn_climate, period = simul_period ) The water budget data set is per year-month in each RCN cell: vi, the vertical inflow t_mean, the mean temperature runoff, the runoff pet, the potential evapotranspiration aet, the actual evapotranspiration gwr, the groundwater recharge runoff_2, the excess runoff The head of this data set is: year month vi t_mean runoff pet aet gwr runoff_2 delta_reservoir rcn_id 2010 1 28.2 -7.3 21.5 1.6 1.6 10.2 0 -5.1 62097 2010 2 27.9 -5.7 7.9 4.6 4.6 8.8 0 6.6 62097 2010 3 83.0 1.0 30.8 19.5 19.5 16.1 0 16.6 62097 2010 4 68.2 7.7 24.9 51.5 51.5 15.1 0 -23.3 62097 2010 5 46.9 13.8 3.8 94.7 73.8 4.4 0 -35.2 62097 2010 6 107.9 17.0 33.3 114.7 81.1 0.2 0 -6.7 62097 2.4 Results The simulation results can be reworked, summarized and visualized. 2.4.1 Save results in files Start with defining the output folder: sim_dir &lt;- file.path(tempdir(), paste0(&quot;simulation_HydroBudget_&quot;, format(Sys.time(), &quot;%Y%m%dT%H_%M&quot;))) Then write the resulting water budget in different formats in this output folder: CSV # CSV rechaRge::write_recharge_results(HB, water_budget, output_dir = sim_dir) NetCDF # NetCDF rechaRge::write_recharge_results(HB, water_budget, output_dir = sim_dir, format = &quot;nc&quot;, input_rcn = input_rcn, names = list( &quot;lon&quot; = list( longname = &quot;Qc lambert NAD83 epsg32198 Est&quot;, unit = &quot;m&quot; ), &quot;lat&quot; = list( longname = &quot;Qc lambert NAD83 epsg32198 North&quot;, unit = &quot;m&quot; ) )) Rasters # Rasters rechaRge::write_recharge_rasters( HB, water_budget = water_budget, input_rcn = input_rcn, crs = &quot;+proj=lcc +lat_1=60 +lat_2=46 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs&quot;, output_dir = sim_dir ) The output folder content should look like this: # List simulation output files list.files(sim_dir) [1] &quot;bilan_spat_month.csv&quot; &quot;bilan_unspat_month.csv&quot; [3] &quot;interannual_aet_NAD83.tif&quot; &quot;interannual_gwr_NAD83.tif&quot; [5] &quot;interannual_runoff_NAD83.tif&quot; &quot;water_budget.nc&quot; 2.4.2 Data visualization Visualize the saved NetCDF file: library(ncdf4) library(lattice) library(viridisLite) # Extract GWR data nc &lt;- nc_open(file.path(sim_dir, &quot;water_budget.nc&quot;)) gwr &lt;- ncvar_get(nc, &quot;gwr&quot;) gwratt &lt;- ncatt_get(nc, &quot;gwr&quot;) lon &lt;- ncvar_get(nc, &quot;lon&quot;) lonatt &lt;- ncatt_get(nc, &quot;lon&quot;) lat &lt;- ncvar_get(nc, &quot;lat&quot;) latatt &lt;- ncatt_get(nc, &quot;lat&quot;) time &lt;- ncvar_get(nc, &quot;time&quot;) nc_close(nc) # Render the 18th month month &lt;- 18 gwr1 &lt;- gwr[,,month] grid &lt;- expand.grid(lon=lon, lat=lat) title &lt;- paste0(gwratt$long_name, &quot; (&quot;, gwratt$units, &quot;) &quot;, &quot; #&quot;, month) xlab &lt;- paste0(latatt$long_name, &quot; (&quot;, latatt$units, &quot;)&quot;) ylab &lt;- paste0(lonatt$long_name, &quot; (&quot;, lonatt$units, &quot;)&quot;) levelplot(gwr1 ~ lon * lat, data=grid, pretty=T, col.regions=inferno(100), main=title, xlab=xlab, ylab=ylab) Visualize the saved raster files: library(tidyterra) library(terra) library(ggplot2) library(cowplot) subtitle &lt;- ifelse(simul_period[1] == simul_period[2], paste0(&quot;In &quot;, simul_period[1]), paste0(&quot;From &quot;, simul_period[1], &quot; to &quot;, simul_period[2]) ) runoff &lt;- terra::rast(file.path(sim_dir, &quot;interannual_runoff_NAD83.tif&quot;)) runoffplot &lt;- ggplot() + geom_spatraster(data = runoff) + scale_fill_viridis_c(option = &quot;inferno&quot;) + labs( fill = &quot;&quot;, title = &quot;Runoff&quot;, subtitle = subtitle ) aet &lt;- terra::rast(file.path(sim_dir, &quot;interannual_aet_NAD83.tif&quot;)) aetplot &lt;- ggplot() + geom_spatraster(data = aet) + scale_fill_viridis_c(option = &quot;inferno&quot;) + labs( fill = &quot;&quot;, title = &quot;Actual Evapotranspiration&quot;, subtitle = subtitle ) gwr &lt;- terra::rast(file.path(sim_dir, &quot;interannual_gwr_NAD83.tif&quot;)) gwrplot &lt;- ggplot() + geom_spatraster(data = gwr) + scale_fill_viridis_c(option = &quot;inferno&quot;) + labs( fill = &quot;&quot;, title = &quot;Groundwater Recharge&quot;, subtitle = subtitle ) cowplot::plot_grid(runoffplot, aetplot, gwrplot) "],["calibration-and-sensitity.html", "Chapter 3 Calibration and Sensitity 3.1 Quality assessment 3.2 Using sensitivity 3.3 Using caRamel", " Chapter 3 Calibration and Sensitity We will make use of rechaRge API to perform calibration and sensitivity analysis with different tools. 3.1 Quality assessment Following the previous example, we will need to load observations datasets: input_rcn_gauging &lt;- paste0(base_url, &quot;rcn_gauging.csv.gz&quot;) # relation between gaugins station and RCN cell IDs input_observed_flow &lt;- paste0(base_url, &quot;observed_flow.csv.gz&quot;) # flow rates in mm/d input_alpha_lyne_hollick &lt;- paste0(base_url, &quot;alpha_lyne_hollick.csv.gz&quot;) And we also need in this case to update the settings of the HydroBudget model object, so that column names match with the expected ones: HB$rcn_gauging_columns &lt;- list( rcn_id = &quot;cell_ID&quot;, station_id = &quot;gauging_stat&quot; ) HB$alpha_lyne_hollick_columns$station_id &lt;- &quot;station&quot; Then we can process the river flow observations and assess simulation quality: quality &lt;- rechaRge::evaluate_simulation_quality( HB, water_budget = water_budget, rcn_gauging = input_rcn_gauging, observed_flow = input_observed_flow, alpha_lyne_hollick = input_alpha_lyne_hollick, period = simul_period ) The rechaRge package proposes an model-free implementation of the Kling-Gupta Efficiency algorithm, that can be used for quality evaluation. In the case of our example the quality measurements of interest are: list( KGE_qtot_cal_mean = mean(quality$simulation_metadata$KGE_qtot_cal), KGE_qbase_cal_mean = mean(quality$simulation_metadata$KGE_qbase_cal)) $KGE_qtot_cal_mean [1] 0.8549218 $KGE_qbase_cal_mean [1] 0.7203224 3.2 Using sensitivity The sensitivity R package can perform various sensitivity analysis. 3.2.1 Define model function library(rechaRge) library(data.table) # Preload input data # Quiet download options(datatable.showProgress = FALSE) # use input example files provided by the package base_url &lt;- &quot;https://github.com/gwrecharge/rechaRge-book/raw/main/examples/input/&quot; input_rcn &lt;- fread(paste0(base_url, &quot;rcn.csv.gz&quot;)) input_climate &lt;- fread(paste0(base_url, &quot;climate.csv.gz&quot;)) input_rcn_climate &lt;- fread(paste0(base_url, &quot;rcn_climate.csv.gz&quot;)) input_rcn_gauging &lt;- fread(paste0(base_url, &quot;rcn_gauging.csv.gz&quot;)) input_observed_flow &lt;- fread(paste0(base_url, &quot;observed_flow.csv.gz&quot;)) input_alpha_lyne_hollick &lt;- fread(paste0(base_url, &quot;alpha_lyne_hollick.csv.gz&quot;)) # Simulation period simul_period &lt;- c(2017, 2017) hydrobudget_eval &lt;- function(i) { # Calibration parameters HB &lt;- rechaRge::new_hydrobudget( T_m = i[1], # melting temperature (°C) C_m = i[2], # melting coefficient (mm/°C/d) TT_F = i[3], # Threshold temperature for soil frost (°C) F_T = i[4], # Freezing time (d) t_API = i[5], # Antecedent precipitation index time (d) f_runoff = i[6], # Runoff factor (-) sw_m = i[7], # Maximum soil water content (mm) f_inf = i[8] # infiltration factor (-) ) # Input data specific settings HB$rcn_columns &lt;- list( rcn_id = &quot;cell_ID&quot;, RCNII = &quot;RCNII&quot;, lon = &quot;X_L93&quot;, lat = &quot;Y_L93&quot; ) HB$climate_columns$climate_id &lt;- &quot;climate_cell&quot; HB$rcn_climate_columns &lt;- list(climate_id = &quot;climate_cell&quot;, rcn_id = &quot;cell_ID&quot;) HB$rcn_gauging_columns &lt;- list(rcn_id = &quot;cell_ID&quot;, station_id = &quot;gauging_stat&quot;) HB$alpha_lyne_hollick_columns$station_id &lt;- &quot;station&quot; # Simulation with the HydroBudget model water_budget &lt;- rechaRge::compute_recharge( HB, rcn = input_rcn, climate = input_climate, rcn_climate = input_rcn_climate, period = simul_period, workers = 1 ) # Evaluate simulation quality result &lt;- rechaRge::evaluate_simulation_quality( HB, water_budget = water_budget, rcn_gauging = input_rcn_gauging, observed_flow = input_observed_flow, alpha_lyne_hollick = input_alpha_lyne_hollick, period = simul_period ) return(c( mean(result$simulation_metadata$KGE_qtot_cal), mean(result$simulation_metadata$KGE_qbase_cal) )) } 3.2.2 Run sensitivity analysis library(sensitivity) # Use future package to parallel library(future.apply) hydrobudget_sens &lt;- function(X) { kge_hb &lt;- as.matrix(t(future_apply(X, MARGIN = 1, FUN = hydrobudget_eval, future.seed = TRUE))) return(kge_hb) } # Number of variables nvar &lt;- 8 # Range of the parameters binf &lt;- c(1, 4, -20, 5, 3.05, 0.5, 160, 0.01) bsup &lt;- c(2.5, 6.5, -12, 30, 4.8, 0.6, 720, 0.05) # parallel computation setting plan(multisession, workers = 3) #plan(sequential) # non parallel sensitivity_results &lt;- morris( model = hydrobudget_sens, factors = nvar, r = 2, design = list(type = &quot;oat&quot;, levels = 5, grid.jump = 3), binf = binf, bsup = bsup) 3.2.3 Handle sensitivity results # Variable of interest mu &lt;- apply(sensitivity_results$ee, 3, function(M){ apply(M, 2, mean) }) mu.star &lt;- apply(abs(sensitivity_results$ee), 3, function(M){ apply(M, 2, mean) }) sigma &lt;- apply(sensitivity_results$ee, 3, function(M){ apply(M, 2, sd) }) sensitivity_eval &lt;- data.table(mu = mu, mu.star = mu.star, sigma = sigma) mu.ycol1 mu.ycol2 mu.star.ycol1 mu.star.ycol2 sigma.ycol1 sigma.ycol2 0.0778685 -0.0604466 0.0778685 0.0604466 0.0073937 0.0593627 -0.0531620 0.0456703 0.0531620 0.0593913 0.0115076 0.0839919 -0.0003949 -0.0044714 0.0003949 0.0044714 0.0005585 0.0063235 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0154742 -0.0175268 0.0154742 0.0175268 0.0041135 0.0015012 0.0475064 -0.1101539 0.0475064 0.1101539 0.0179669 0.0351856 -0.3996683 -0.6300180 0.3996683 0.6300180 0.1990187 0.1328317 0.1295731 0.6734605 0.1295731 0.6734605 0.0137791 0.2675614 # Plot plot(sensitivity_results, y_col = 2) title(main = &quot;y_col = 2&quot;) plot.new() plot(sensitivity_results, y_col = 1) title(main = &quot;y_col = 1&quot;) 3.3 Using caRamel The caRamel R package can perform both calibration and sensitivity analysis. 3.3.1 Define objective function We will start by defining the objective function to optimize: this function will run a simulation and quality evaluation and its returned values will be used by caRamel to measure the quality of the injected parameters. make_hydrobudget_eval &lt;- function() { # Preload input data # Quiet download options(datatable.showProgress = FALSE) # use input example files provided by the package base_url &lt;- &quot;https://github.com/gwrecharge/rechaRge-book/raw/main/examples/input/&quot; input_rcn &lt;- fread(paste0(base_url, &quot;rcn.csv.gz&quot;)) input_climate &lt;- fread(paste0(base_url, &quot;climate.csv.gz&quot;)) input_rcn_climate &lt;- fread(paste0(base_url, &quot;rcn_climate.csv.gz&quot;)) input_rcn_gauging &lt;- fread(paste0(base_url, &quot;rcn_gauging.csv.gz&quot;)) input_observed_flow &lt;- fread(paste0(base_url, &quot;observed_flow.csv.gz&quot;)) input_alpha_lyne_hollick &lt;- fread(paste0(base_url, &quot;alpha_lyne_hollick.csv.gz&quot;)) # Simulation period simul_period &lt;- c(2017, 2017) hydrobudget_eval &lt;- function(i) { # Calibration parameters HB &lt;- rechaRge::new_hydrobudget( T_m = x[i, 1], # melting temperature (°C) C_m = x[i, 2], # melting coefficient (mm/°C/d) TT_F = x[i, 3], # Threshold temperature for soil frost (°C) F_T = x[i, 4], # Freezing time (d) t_API = x[i, 5], # Antecedent precipitation index time (d) f_runoff = x[i, 6], # Runoff factor (-) sw_m = x[i, 7], # Maximum soil water content (mm) f_inf = x[i, 8] # infiltration factor (-) ) # Input data specific settings HB$rcn_columns &lt;- list( rcn_id = &quot;cell_ID&quot;, RCNII = &quot;RCNII&quot;, lon = &quot;X_L93&quot;, lat = &quot;Y_L93&quot; ) HB$climate_columns$climate_id &lt;- &quot;climate_cell&quot; HB$rcn_climate_columns &lt;- list(climate_id = &quot;climate_cell&quot;, rcn_id = &quot;cell_ID&quot;) HB$rcn_gauging_columns &lt;- list(rcn_id = &quot;cell_ID&quot;, station_id = &quot;gauging_stat&quot;) HB$alpha_lyne_hollick_columns$station_id &lt;- &quot;station&quot; # Simulation with the HydroBudget model rechaRge::with_verbose(FALSE) water_budget &lt;- rechaRge::compute_recharge( HB, rcn = input_rcn, climate = input_climate, rcn_climate = input_rcn_climate, period = simul_period, workers = 1 # do not parallelize, caRamel will do it ) # Evaluate simulation quality quality &lt;- rechaRge::evaluate_simulation_quality( HB, water_budget = water_budget, rcn_gauging = input_rcn_gauging, observed_flow = input_observed_flow, alpha_lyne_hollick = input_alpha_lyne_hollick, period = simul_period ) return(c( mean(quality$simulation_metadata$KGE_qtot_cal), mean(quality$simulation_metadata$KGE_qbase_cal) )) } return(hydrobudget_eval) } 3.3.2 Run calibration analysis Then perform calibration with sensitivity: library(caRamel) # Number of objectives nobj &lt;- 2 # Number of variables nvar &lt;- 8 # All the objectives are to be maximized minmax &lt;- c(TRUE, TRUE) # Ranges of the parameters bounds &lt;- matrix(nrow = nvar, ncol = 2) bounds[, 1] &lt;- c(1, 4, -20, 5, 3.05, 0.5, 160, 0.01) bounds[, 2] &lt;- c(2.5, 6.5, -12, 30, 4.8, 0.6, 720, 0.05) calibration_results &lt;- caRamel( nobj = nobj, nvar = nvar, minmax = minmax, bounds = bounds, func = make_hydrobudget_eval(), prec = matrix(0.01, nrow = 1, ncol = nobj), sensitivity = FALSE, # you can include sensitivity analysis archsize = 100,# adjust to relevant value popsize = 10, # adjust to relevant value maxrun = 10, # adjust to relevant value carallel = 1, # do parallel ... numcores = 2 # ... on 2 cores ) 3.3.3 Handle calibration results Make use of calibration results, by merging simulation outputs with front objectives, to get more readable parameters, ordered by “best fit” score: output_front &lt;- data.table(cbind(calibration_results$parameters, calibration_results$objectives)) colnames(output_front) &lt;- c(&quot;T_m&quot;, &quot;C_m&quot;, &quot;TT_F&quot;, &quot;F_T&quot;, &quot;t_API&quot;, &quot;f_runoff&quot;, &quot;sw_m&quot;, &quot;f_inf&quot;, &quot;KGE_qtot&quot;, &quot;KGE_qbase&quot;) y &lt;- 0.6 # choose your KGE weight criteria output_front[, `:=`(KGE_score = (KGE_qtot * (1 - y) + KGE_qbase * y))] output_front &lt;- output_front[order(KGE_score, decreasing = TRUE)] T_m C_m TT_F F_T t_API f_runoff sw_m f_inf KGE_qtot KGE_qbase KGE_score 1.582466 5.729937 -19.49674 26.98782 3.419989 0.5322689 182.8719 0.0228539 0.6394902 0.7301476 0.6938846 2.323715 4.498876 -15.32375 17.52548 4.021084 0.5599587 185.3178 0.0390047 0.7240221 0.6630642 0.6874473 Display the results with caRamel’s plotting feature: # Plot using caRamel plot_caramel(calibration_results, objnames = c(&quot;KGE_qtot&quot;, &quot;KGE_qbase&quot;)) Scatter plot the calibration’s simulations, with the resulting Pareto front: # Plot all using ggplot library(ggplot2) front &lt;- data.table(calibration_results$objectives) colnames(front) &lt;- c(&quot;KGE_qtot&quot;, &quot;KGE_qbase&quot;) all &lt;- data.table(calibration_results$total_pop[, 9:10]) colnames(all) &lt;- c(&quot;KGE_qtot&quot;, &quot;KGE_qbase&quot;) combined_data &lt;- rbind(all, front) combined_data$group &lt;- c(rep(&quot;All&quot;, nrow(all)), rep(&quot;Front&quot;, nrow(front))) ggplot(combined_data, aes(x = KGE_qtot, y = KGE_qbase, color = group)) + geom_point() + labs(title = &quot;Scatter plot of simulations&quot;, x = &quot;KGE_qtot&quot;, y = &quot;KGE_qbase&quot;, color = &quot;Dataset&quot;) + theme_minimal() 3.3.4 Evaluate uncertainty For each set of parameters proposed by caRamel, run a simulation and then evaluate the uncertainty of the set of parameters identified as being the “best fit”. # for each proposed set of parameters, run the water budget simulation param_ids &lt;- as.numeric(rownames(output_front)) # run simulations water_budgets &lt;- lapply(param_ids, FUN = function(i) { x &lt;- output_front HB &lt;- rechaRge::new_hydrobudget( T_m = as.numeric(x[i, 1]), C_m = as.numeric(x[i, 2]), TT_F = as.numeric(x[i, 3]), F_T = as.numeric(x[i, 4]), t_API = as.numeric(x[i, 5]), f_runoff = as.numeric(x[i, 6]), sw_m = as.numeric(x[i, 7]), f_inf = as.numeric(x[i, 8]) ) # Input data specific settings HB$rcn_columns &lt;- list( rcn_id = &quot;cell_ID&quot;, RCNII = &quot;RCNII&quot;, lon = &quot;X_L93&quot;, lat = &quot;Y_L93&quot; ) HB$climate_columns$climate_id &lt;- &quot;climate_cell&quot; HB$rcn_climate_columns &lt;- list(climate_id = &quot;climate_cell&quot;, rcn_id = &quot;cell_ID&quot;) # Simulation with the HydroBudget model rechaRge::compute_recharge( HB, rcn = input_rcn, climate = input_climate, rcn_climate = input_rcn_climate, period = simul_period, workers = 2 ) }) The following function will, for a given metric (e.g. gwr, runoff etc.): make one row per year-month, one column for the value of the “best fit” simulation, one for the mean of all the simulated values, and one for the standard deviation between all the simulated values. plot the corresponding time series, showing how the “best fit” compares with the mean and the standard deviation range. # make one row per year-month and one column per simulated measure plot_metric &lt;- function(water_budgets, metric, title = NULL) { # spatialized: add metric values starting from best fit metrics &lt;- data.table(year = water_budgets[[1]]$year, month = water_budgets[[1]]$month) for (i in param_ids) { param_id &lt;- paste0(metric, i) set(metrics, j = param_id, value = water_budgets[[i]][[metric]]) } # non-spatialized: calculate mean, group by year-month metrics_monthly &lt;- unique(metrics, by = c(&quot;year&quot;, &quot;month&quot;))[, c(&quot;year&quot;, &quot;month&quot;)] for (i in param_ids) { param_id &lt;- paste0(metric, i) metrics_id &lt;- metrics[ , .(mean = mean(get(param_id))), by = c(&quot;year&quot;, &quot;month&quot;)] set(metrics_monthly, j = param_id, value = metrics_id$mean) } # add mean and sd for each year-month row ym_cols &lt;- c(&quot;year&quot;, &quot;month&quot;) set(metrics_monthly, j = &quot;mean&quot;, value = apply(metrics_monthly[, !..ym_cols], 1, mean)) set(metrics_monthly, j = &quot;sd&quot;, value = apply(metrics_monthly[, !..ym_cols], 1, sd)) set(metrics_monthly, j = &quot;date&quot;, value = as.POSIXct(paste(metrics_monthly$year, metrics_monthly$month, &quot;1&quot;, sep=&quot;-&quot;))) set(metrics_monthly, j = &quot;min&quot;, value = metrics_monthly$mean - metrics_monthly$sd) set(metrics_monthly, j = &quot;max&quot;, value = metrics_monthly$mean + metrics_monthly$sd) colnames(metrics_monthly)[[3]] &lt;- &quot;best&quot; # plot uncertainty library(ggplot2) library(scales) ggplot(data = metrics_monthly, aes(x = date)) + geom_ribbon(aes(ymin = min, ymax = max), fill = &quot;gray&quot;, alpha = 0.4) + geom_line(aes(y = mean, color = &quot;mean&quot;)) + geom_line(aes(y = best, color = &quot;best&quot;)) + labs(title = title, color = metric, x = &quot;date&quot;, y = metric) + scale_color_manual(values = c(best = &quot;red&quot;, mean = &quot;cyan&quot;)) + scale_x_datetime(date_labels = &quot;%Y-%m&quot;, breaks = date_breaks(&quot;months&quot;)) + theme(axis.text.x = element_text(angle = 90), legend.position = &quot;top&quot;) } We can now visualize the uncertainty for different metrics: plot_metric(water_budgets, &quot;gwr&quot;, title = paste0(&quot;Simulations (&quot;, length(param_ids),&quot;): groundwater recharge&quot;)) plot_metric(water_budgets, &quot;runoff&quot;, title = paste0(&quot;Simulations (&quot;, length(param_ids),&quot;): runoff&quot;)) plot_metric(water_budgets, &quot;vi&quot;, title = paste0(&quot;Simulations (&quot;, length(param_ids),&quot;): vertical inflow&quot;)) plot_metric(water_budgets, &quot;aet&quot;, title = paste0(&quot;Simulations (&quot;, length(param_ids),&quot;): actual evapotranspiration&quot;)) "],["extensibility.html", "Chapter 4 Extensibility 4.1 Generic functions 4.2 Other languages", " Chapter 4 Extensibility 4.1 Generic functions The rechaRge package exposes the following S3 generic functions: compute_recharge, is the main function that performs the simulation computations according to the provided model parameters and input data. The result of this function is an input of the following functions. write_recharge_results, will write the simulation results into data files, summarized results can be included and various output file formats can be supported, depending on the model. write_recharge_rasters, will write the simulation results into raster files. evaluate_simulation_quality, is evaluating the quality of simulation output. This function should be used when making calibration and sensitivity analysis. You can use the reference implementation of HydroBudget model to extend this API with your own model. For this you will need to start with the definition of a model specific object. In the case of HydroBudget, this object holds the parameters of the model and some helper information about the input source format. See the new_hydrobudget function. 4.2 Other languages If you have a model designed in Python, you could consider using the reticulate R package that facilitates the binding between the R and the Python execution environments. "],["about-r.html", "Chapter 5 About R", " Chapter 5 About R R is a free, open-source software and programming language developed in 1995 at the University of Auckland as an environment for statistical computing and graphics (Ikaha and Gentleman, 1996). Since then R has become one of the dominant software environments for data analysis and is used by a variety of scientific disciplines. CRAN Tasks provides an excellent overview of existing R packages for a given discipline (see for instance Envirometrics Task View; Spatial Task View). R offers numerous advantages, such as: Free and Open source Reproducible Research repeatable: code + output in a single document easier the re-analyses scalable: applicable to small or large datasets extensible: several Getting help Numerous Discipline Specific R Groups Numerous Local R User Groups (including R-Ladies Groups) Stack Overflow Learning Resources R books (Free Online) R Books "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
